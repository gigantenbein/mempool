diff --git b/hardware/deps/tech_cells_generic/Bender.yml a/hardware/deps/tech_cells_generic/Bender.yml
index 877c88e..4a0e5bf 100644
--- b/hardware/deps/tech_cells_generic/Bender.yml
+++ a/hardware/deps/tech_cells_generic/Bender.yml
@@ -13,23 +13,23 @@ sources:

   - target: all(fpga, xilinx)
     files:
-      - src/deprecated/cluster_clk_cells_xilinx.sv
+      # - src/deprecated/cluster_clk_cells_xilinx.sv
       - src/fpga/tc_clk_xilinx.sv
       - src/fpga/tc_sram_xilinx.sv

   - target: not(all(fpga, xilinx))
     files:
       # Level 0
-      - src/deprecated/cluster_clk_cells.sv
-      - src/deprecated/pulp_clk_cells.sv
+      # - src/deprecated/cluster_clk_cells.sv
+      # - src/deprecated/pulp_clk_cells.sv
       - src/rtl/tc_clk.sv

   - target: not(synthesis)
     files:
-      - src/deprecated/cluster_pwr_cells.sv
-      - src/deprecated/generic_memory.sv
-      - src/deprecated/generic_rom.sv
-      - src/deprecated/pad_functional.sv
-      - src/deprecated/pulp_buffer.sv
-      - src/deprecated/pulp_pwr_cells.sv
+      # - src/deprecated/cluster_pwr_cells.sv
+      # - src/deprecated/generic_memory.sv
+      # - src/deprecated/generic_rom.sv
+      # - src/deprecated/pad_functional.sv
+      # - src/deprecated/pulp_buffer.sv
+      # - src/deprecated/pulp_pwr_cells.sv
       - src/tc_pwr.sv

   - target: test
diff --git b/hardware/deps/tech_cells_generic/scripts/run_vsim.sh a/hardware/deps/tech_cells_generic/scripts/run_vsim.sh
index 34f2e22..b860912 100755
--- b/hardware/deps/tech_cells_generic/scripts/run_vsim.sh
+++ a/hardware/deps/tech_cells_generic/scripts/run_vsim.sh
@@ -34,4 +34,3 @@ for PORTS in 1 2; do
     done
   done
 done
-
diff --git b/hardware/deps/tech_cells_generic/src/fpga/tc_sram_xilinx.sv a/hardware/deps/tech_cells_generic/src/fpga/tc_sram_xilinx.sv
index 58e9806..c706802 100644
--- b/hardware/deps/tech_cells_generic/src/fpga/tc_sram_xilinx.sv
+++ a/hardware/deps/tech_cells_generic/src/fpga/tc_sram_xilinx.sv
@@ -22,7 +22,7 @@ module tc_sram #(
   parameter int unsigned ByteWidth    = 32'd8,    // Width of a data byte (in bits)
   parameter int unsigned NumPorts     = 32'd2,    // Number of read and write ports
   parameter int unsigned Latency      = 32'd1,    // Latency when the read data is available
-  parameter string       SimInit      = "zeros",  // Simulation initialization, fixed to zero here!
+  parameter              SimInit      = "zeros",  // Simulation initialization, fixed to zero here!
   parameter bit          PrintSimCfg  = 1'b0,     // Print configuration
   // DEPENDENT PARAMETERS, DO NOT OVERWRITE!
   parameter int unsigned AddrWidth = (NumWords > 32'd1) ? $clog2(NumWords) : 32'd1,
diff --git b/hardware/deps/tech_cells_generic/src/rtl/tc_sram.sv a/hardware/deps/tech_cells_generic/src/rtl/tc_sram.sv
index 53530e0..82fe1f7 100644
--- b/hardware/deps/tech_cells_generic/src/rtl/tc_sram.sv
+++ a/hardware/deps/tech_cells_generic/src/rtl/tc_sram.sv
@@ -124,9 +124,11 @@ module tc_sram #(
   // write memory array
   always_ff @(posedge clk_i or negedge rst_ni) begin
     if (!rst_ni) begin
+      `ifndef VERILATOR
       for (int unsigned i = 0; i < NumWords; i++) begin
         sram[i] <= init_val[i];
       end
+      `endif
       for (int i = 0; i < NumPorts; i++) begin
         r_addr_q[i] <= {AddrWidth{1'b0}};
         // initialize the read output register for each port
@@ -149,12 +151,14 @@ module tc_sram #(
       for (int unsigned i = 0; i < NumPorts; i++) begin
         if (req_i[i]) begin
           if (we_i[i]) begin
+            `ifndef VERILATOR
             // update value when write is set at clock
             for (int unsigned j = 0; j < DataWidth; j++) begin
               if (be_i[i][j/ByteWidth]) begin
                 sram[addr_i[i]][j] <= wdata_i[i][j];
               end
             end
+            `endif
           end else begin
             // otherwise update read address for subsequent non request cycles
             r_addr_q[i] <= addr_i[i];
@@ -164,6 +168,23 @@ module tc_sram #(
     end // if !rst_ni
   end

+  `ifdef VERILATOR
+  for (genvar i = 0; i < NumPorts; i++) begin
+    // update value when write is set at clock
+    for (genvar j = 0; j < DataWidth; j++) begin
+      always_ff @(posedge clk_i or negedge rst_ni) begin
+        if (!rst_ni) begin
+        end else begin
+          if (req_i[i])
+            if (we_i[i])
+              if (be_i[i][j/ByteWidth])
+                sram[addr_i[i]][j] <= wdata_i[i][j];
+        end
+      end
+    end
+  end
+  `endif
+
 // Validate parameters.
 // pragma translate_off
 `ifndef VERILATOR
@@ -204,4 +225,69 @@ module tc_sram #(
 `endif
 `endif
 // pragma translate_on
+
+// Copyright lowRISC contributors.
+// Licensed under the Apache License, Version 2.0, see LICENSE for details.
+// SPDX-License-Identifier: Apache-2.0
+
+/**
+ * Memory loader for simulation
+ *
+ * Include this file in a memory primitive to load a memory array from
+ * simulation.
+ *
+ * Requirements:
+ * - A memory array named `sram`.
+ * - A parameter `DataWidth` giving the memory width (word size) in bit.
+ * - A parameter `NumWords` giving the memory depth in words.
+ */
+
+`ifndef SYNTHESIS
+  // Task for loading 'sram' with SystemVerilog system task $readmemh()
+  export "DPI-C" task simutil_memload;
+
+  task simutil_memload;
+    input string file;
+    $readmemh(file, sram);
+  endtask
+
+  // Function for setting a specific element in |sram|
+  // Returns 1 (true) for success, 0 (false) for errors.
+  export "DPI-C" function simutil_set_mem;
+
+  function int simutil_set_mem(input int index, input bit [1023:0] val);
+
+    // Function will only work for memories <= 1024 bits
+    if (DataWidth > 1024) begin
+      return 0;
+    end
+
+    if (index >= NumWords) begin
+      return 0;
+    end
+
+    sram[index] = val[DataWidth-1:0];
+    return 1;
+  endfunction
+
+  // Function for getting a specific element in |sram|
+  export "DPI-C" function simutil_get_mem;
+
+  function int simutil_get_mem(input int index, output bit [1023:0] val);
+
+    // Function will only work for memories <= 1024 bits
+    if (DataWidth > 1024) begin
+      return 0;
+    end
+
+    if (index >= NumWords) begin
+      return 0;
+    end
+
+    val = 0;
+    val[DataWidth-1:0] = sram[index];
+    return 1;
+  endfunction
+`endif
+
 endmodule
